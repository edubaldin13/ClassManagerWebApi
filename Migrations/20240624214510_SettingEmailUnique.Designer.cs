// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using class_management_web_api.src.Contexts;

#nullable disable

namespace class_management_web_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240624214510_SettingEmailUnique")]
    partial class SettingEmailUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("class_management_web_api.src.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ad21b13-b94a-4042-9347-e357c0a2b72c"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eduarbaldin@gmail.com",
                            Name = "Admin Eduardo",
                            Password = "123456",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.ClassSubject", b =>
                {
                    b.Property<Guid>("ClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClassSubjectId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSubjects");

                    b.HasData(
                        new
                        {
                            ClassSubjectId = new Guid("d951c6e5-9532-43e3-af57-685c977b7596"),
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1344),
                            ManagerId = new Guid("97f31c66-6114-487a-a364-fcd2659c01a1"),
                            Name = "PowerBI",
                            TeacherId = new Guid("ee6393f2-abfe-47e6-8186-bc08bc4a4cd0"),
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1344)
                        },
                        new
                        {
                            ClassSubjectId = new Guid("2212af65-2a5e-4fe2-9df2-31b3cb7df3ec"),
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1348),
                            ManagerId = new Guid("97f31c66-6114-487a-a364-fcd2659c01a1"),
                            Name = "PowerBI",
                            TeacherId = new Guid("d0c7bf7b-efc0-4c63-9c9b-1bfa0e1dd207"),
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1348)
                        });
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.ClassTime", b =>
                {
                    b.Property<Guid>("ClassTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClassClosingHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClassDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClassStartingHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ClassesQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WeekDay")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassTimeId");

                    b.ToTable("ClassTime");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.GraduationCourse", b =>
                {
                    b.Property<Guid>("GraduationCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassDuration")
                        .HasColumnType("int");

                    b.Property<int>("ClassesQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GraduationCourseId");

                    b.HasIndex("ManagerId");

                    b.ToTable("GraduationCourses");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ManagerId");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            ManagerId = new Guid("97f31c66-6114-487a-a364-fcd2659c01a1"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1320),
                            Email = "teste@gmail.com",
                            Name = "Cordenador Teste",
                            Password = "123456",
                            Role = "Manager",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1321)
                        },
                        new
                        {
                            ManagerId = new Guid("61794cec-ba4a-432c-af5e-f58fe07799ac"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1324),
                            Email = "pedro@gmail.com",
                            Name = "Pedro",
                            Password = "123456",
                            Role = "Manager",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1324)
                        });
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Principal", b =>
                {
                    b.Property<Guid>("PrincipalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<Guid>("ClassSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("PrincipalDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PrincipalId");

                    b.HasIndex("ClassSubjectId");

                    b.ToTable("Principals");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Register", b =>
                {
                    b.Property<Guid>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivationKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RegisterId");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Teacher", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<Guid?>("GraduationCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TeacherId");

                    b.HasIndex("GraduationCourseId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("ee6393f2-abfe-47e6-8186-bc08bc4a4cd0"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1292),
                            Email = "johanny@gmail.com",
                            Name = "Johanny",
                            Password = "123456",
                            Role = "Teacher",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1292)
                        },
                        new
                        {
                            TeacherId = new Guid("d0c7bf7b-efc0-4c63-9c9b-1bfa0e1dd207"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1295),
                            Email = "tiago@gmail.com",
                            Name = "Tiago",
                            Password = "123456",
                            Role = "Teacher",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1296)
                        });
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0528a07-6659-43c1-988c-9d26c6e883b5"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1247),
                            Email = "eduarbaldin@gmail.com",
                            Name = "Admin",
                            Password = "123456",
                            Role = 3,
                            Salt = "y9wrDdai3E=n",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1250)
                        },
                        new
                        {
                            Id = new Guid("dc9e38e5-50fe-4ece-83e0-510bf7be5aa5"),
                            CPF = "12345678",
                            CreatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1255),
                            Email = "diretor@gmail.com",
                            Name = "Diretor Teste",
                            Password = "123456",
                            Role = 2,
                            Salt = "y9wrDdai3E=k",
                            UpdatedAt = new DateTime(2024, 6, 24, 21, 45, 8, 772, DateTimeKind.Utc).AddTicks(1256)
                        });
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.ClassSubject", b =>
                {
                    b.HasOne("class_management_web_api.src.Entities.Manager", "Manager")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("class_management_web_api.src.Entities.Teacher", "Teacher")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.GraduationCourse", b =>
                {
                    b.HasOne("class_management_web_api.src.Entities.Manager", "Manager")
                        .WithMany("GraduationCourses")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Principal", b =>
                {
                    b.HasOne("class_management_web_api.src.Entities.ClassSubject", "ClassSubject")
                        .WithMany()
                        .HasForeignKey("ClassSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Teacher", b =>
                {
                    b.HasOne("class_management_web_api.src.Entities.GraduationCourse", "GraduationCourse")
                        .WithMany("Teachers")
                        .HasForeignKey("GraduationCourseId");

                    b.Navigation("GraduationCourse");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.GraduationCourse", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Manager", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("GraduationCourses");
                });

            modelBuilder.Entity("class_management_web_api.src.Entities.Teacher", b =>
                {
                    b.Navigation("ClassSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
